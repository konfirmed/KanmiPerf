const e={TTFB:{good:800,needsImprovement:1800}};let t=!1;const n=(()=>{const n={};return window.__kanmiVitalsLog=window.__kanmiVitalsLog||[],n.timeline=[],n.metrics={FCP:0,LCP:0,CLS:0,INP:0,TTFB:0,LongTasks:[]},n.issues=[],n.log=(e,t)=>{const r=(new Date).toISOString();console.groupCollapsed(`[KanmiPerf 🚀] ⚠️ ${e} at ${r}`),t.forEach((e=>console.log(`- ${e}`))),console.groupEnd(),window.__kanmiVitalsLog.push({type:e,issues:t,timestamp:r}),n.timeline.push({type:e,issues:t,time:performance.now()}),t.forEach((t=>{n.issues.push(`[${e}] ${t}`)}))},n.domAnalysis=()=>{const e=[...document.querySelectorAll("img:not([width]), img:not([height])")];e.length&&n.log("DOM Issues",[`${e.length} image${e.length>1?"s":""} missing dimensions (causes CLS)`])},n.headAnalysis=()=>{const e=[],t=[...document.head.querySelectorAll("script[src]")].filter((e=>!e.defer&&!e.async));t.length&&e.push(`${t.length} blocking script${t.length>1?"s":""} without async/defer`,...t.map((e=>`Suggest moving ${e.src} lower or load it with async/defer`)));const r=document.head?.outerHTML||"",o=(r.length/1024).toFixed(1);r.length>8e3&&e.push(`The <head> section is large (${o} KB)`,"→ Consider optimizing it."),e.length>0&&n.log("<head> Issues",e)},n.thirdPartyAnalysis=()=>{const e=location.hostname,t=[...document.scripts].filter((t=>t.src&&!t.src.includes(e))).filter((e=>!e.defer&&!e.async));t.length&&n.log("Third-party Issues",t.map((e=>`${new URL(e.src).hostname} synchronously loaded, delays rendering → Suggest loading async/defer or using Partytown`)))},n.monitorLongTasks=()=>{if(!("PerformanceObserver"in window))return;const e=[];new PerformanceObserver((t=>{t.getEntries().forEach((t=>{if(t.duration>50){const r=Math.round(t.duration);let o="🟡 Minor";r>200?o="🚨 Severe":r>125&&(o="⚠️ Moderate"),n.log("Long Task",[`${o} – Main thread blocked for ${r}ms`,"→ Break into smaller functions, use requestIdleCallback or Web Workers for heavy work"]),e.push(r)}}))})).observe({type:"longtask",buffered:!0}),n.metrics.LongTasks=e},n.monitorLoAF=()=>{if(!PerformanceObserver.supportedEntryTypes.includes("long-animation-frame"))return;new PerformanceObserver((e=>{e.getEntries().forEach((e=>{const{duration:t,blockingDuration:r,renderTime:o,styleAndLayoutDuration:i}=e,s=e=>Number.isFinite(e)?Math.round(e):"N/A";let a=[`Duration: ${s(t)}ms, Blocking: ${s(r)}ms`,`Render: ${s(o)}ms, Layout: ${s(i)}ms`];void 0!==o&&void 0!==i||a.push("Note: Browser does not support detailed render/layout metrics for LoAF entries."),a.push("→ Investigate heavy scripts or CSS causing recalculations"),n.log("LoAF Detected",a)}))})).observe({type:"long-animation-frame",buffered:!0})},n.monitorINP=()=>{if(!PerformanceObserver.supportedEntryTypes.includes("event"))return;new PerformanceObserver((e=>{e.getEntries().forEach((e=>{if(e.duration>300){let t=[`${e.name} delayed interaction response by ${Math.round(e.duration)}ms`];if(e.target)try{const n=e.target.outerHTML?.slice(0,100)||`[${e.target.nodeName}]`;t.push(`Element: ${n}`),e.target.style.outline="2px solid purple",setTimeout((()=>e.target.style.outline=""),2500)}catch(e){t.push("Element: [unreadable]")}t.push("→ Optimize interaction handlers. Avoid blocking JS, reflows, and heavy tasks."),n.log("INP Interaction Issue",t),n.metrics.INP=Math.round(e.duration)}}))})).observe({type:"event",durationThreshold:300,buffered:!0})},n.monitorLCP=()=>{if(!PerformanceObserver.supportedEntryTypes.includes("largest-contentful-paint"))return;let e;new PerformanceObserver((t=>{t.getEntries().forEach((t=>{e=t,console.debug("[KanmiPerf Debug] LCP entry captured:",t)}))})).observe({type:"largest-contentful-paint",buffered:!0}),document.addEventListener("visibilitychange",(()=>{if("hidden"===document.visibilityState&&e){const t=Math.round(e.renderTime||e.loadTime);let r=e.element?e.element.outerHTML.slice(0,100):"N/A";e.element&&(e.element.style.outline="2px solid red",setTimeout((()=>{e.element.style.outline=""}),3e3)),n.log("LCP",[`Largest Contentful Paint: ${t}ms`,`Element: ${r}`,"→ Optimize images, text, and video content for faster loading"]),n.metrics.LCP=t}}))},n.monitorCLS=()=>{if(!PerformanceObserver.supportedEntryTypes.includes("layout-shift"))return;let e=0,t=[];const r=[];new PerformanceObserver((n=>{n.getEntries().forEach((n=>{!n.hadRecentInput&&n.value>0&&(e+=n.value,(n.sources||[]).slice(0,3).forEach((e=>{try{e.node&&e.node.outerHTML?(t.push(e.node.outerHTML.slice(0,100)),r.push(e.node)):t.push("[Unknown Source]")}catch(e){t.push("[Error Reading Source]")}})),console.debug("[KanmiPerf Debug] Layout shift entry:",n))}))})).observe({type:"layout-shift",buffered:!0}),document.addEventListener("visibilitychange",(()=>{if("hidden"===document.visibilityState){const o=+e.toFixed(3);let i="Good";o>.25?i="Poor":o>.1&&(i="Needs Improvement");const s=[`Cumulative Layout Shift: ${o} (${i})`,"→ Consider reserving space for images, ads, embeds, or dynamic content to reduce unexpected shifts."];t.length&&s.push(`Top shifting elements: ${t.join(" | ")}`),n.log("CLS",s),n.metrics.CLS=o,r.forEach((e=>{e&&e.style&&(e.style.outline="2px dashed orange",setTimeout((()=>e.style.outline=""),3e3))}))}}))},n.timingAnalysis=()=>{const t=performance.getEntriesByType("navigation")[0];if(t){const r=Math.round(t.responseStart),o=e.TTFB,i=[`Time To First Byte: ${r}ms`];r<=o.good?i.push("TTFB is in the Good range."):r<=o.needsImprovement?i.push("→ TTFB is slightly high. Review server response time and cache strategy."):i.push("→ TTFB is very high. Optimize backend performance, CDN, and server-side rendering.");const s=document.head?.outerHTML||"",a=(s.length/1024).toFixed(1);s.length>1e4&&i.push(`→ The <head> section is large (${a} KB). Consider optimizing it.`);const l=document.head.querySelectorAll("script").length,d=document.head.querySelectorAll("script:not([src])").length,c=document.head.querySelectorAll("link[rel='stylesheet']").length,u=document.head.querySelectorAll("style").length,m=document.head.querySelectorAll("link[rel='preload']").length;l>5&&i.push(`→ There are ${l} <script> tags in <head>. Consider deferring non-critical JS.`),d>1&&i.push("→ Multiple inline <script> blocks found. Consider externalizing where possible."),c>3&&i.push(`→ ${c} stylesheets detected. Consolidate critical CSS to reduce requests.`),u>1&&i.push(`→ ${u} <style> blocks found. Inline styles can delay parsing.`),m>5&&i.push(`→ ${m} preload tags found. Verify they are used early to avoid wasted bytes.`),n.log("TTFB & <head> Analysis",i),n.metrics.TTFB=r}},n.monitorFCP=()=>{if(!PerformanceObserver.supportedEntryTypes.includes("paint"))return;let e;new PerformanceObserver((t=>{t.getEntries().forEach((t=>{"first-contentful-paint"===t.name&&(e=t)}))})).observe({type:"paint",buffered:!0}),document.addEventListener("visibilitychange",(()=>{if("hidden"===document.visibilityState&&e){const t=Math.round(e.startTime);n.log("FCP",[`First Contentful Paint: ${t}ms`,"→ Ensure critical resources are loaded efficiently."]),n.metrics.FCP=t}}))},n.analyzeTimeline=()=>{if(n.timeline.length>1){const e=[...n.timeline].sort(((e,t)=>e.time-t.time)),t=e[0].time,r=e.map(((e,n)=>{const r=Math.round(e.time-t);return`${n+1}. ${e.type} ➜ ${r}ms`}));n.log("Timeline Report",r)}else n.log("Timeline Report",["Insufficient data to generate timeline"])},n.run=()=>{n.domAnalysis(),n.headAnalysis(),n.thirdPartyAnalysis(),n.monitorLongTasks(),n.monitorLoAF(),n.monitorINP(),n.monitorLCP(),n.monitorCLS(),n.timingAnalysis(),n.monitorFCP()},n.init=async(e={})=>{const r=e.licenseKey||window.KanmiPerfProLicenseKey;if(!r)return void console.error("[KanmiPerf Pro] ⚠️ No licenceKey provided. Purchase one at https://knfrmd.com/pricing");const o=await async function(e){try{const n=await fetch(`https://www.knfrmd.com/api/license/validate?key=${encodeURIComponent(e)}`),r=await n.json();t=!!r?.valid}catch(e){console.warn("[KanmiPerf Pro] Licence validation failed – running in demo mode.",e),t=!1}return t}(r);o?("complete"===document.readyState?n.run():window.addEventListener("load",n.run),document.addEventListener("visibilitychange",(()=>{"hidden"===document.visibilityState&&n.analyzeTimeline()}))):console.error("[KanmiPerf Pro] ⚠️ Licence key invalid. Aborting run.")},window.onerror=(e,t,r,o,i)=>{const s=`${e} at ${t}:${r}:${o}`;return n.log("JS Error",[s]),!1},window.KanmiPerf=n,n})();export{n as default};
//# sourceMappingURL=kanmi-perf-pro.esm.js.map
